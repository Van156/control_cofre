/**
   --------------------------------------------------------------------------------------------------------------------
   Example sketch/program showing how to read data from more than one PICC to serial.
   --------------------------------------------------------------------------------------------------------------------
   This is a MFRC522 library example; for further details and other examples see: https://github.com/miguelbalboa/rfid
   Example sketch/program showing how to read data from more than one PICC (that is: a RFID Tag or Card) using a
   MFRC522 based RFID Reader on the Arduino SPI interface.
   Warning: This may not work! Multiple devices at one SPI are difficult and cause many trouble!! Engineering skill
            and knowledge are required!
   @license Released into the public domain.
   Typical pin layout used:
   -----------------------------------------------------------------------------------------
               MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
               Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
   Signal      Pin          Pin           Pin       Pin        Pin              Pin
   -----------------------------------------------------------------------------------------
   RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
   SPI SS 1    SDA(SS)      ** custom, take a unused pin, only HIGH/LOW required *
   SPI SS 2    SDA(SS)      ** custom, take a unused pin, only HIGH/LOW required *
   SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
   SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
   SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
*/

#include <SPI.h>
#include <MFRC522.h>

// PIN Numbers : RESET + SDAs
#define RST_PIN         9
#define SS_1_PIN        10
#define SS_2_PIN        8
#define SS_3_PIN        7
#define SS_4_PIN        6

// Led and Relay PINS
//#define GreenLed        2
//#define relayIN         3
//#define RedLed          4


// List of Tags UIDs that are allowed to open the puzzle
byte tagarray[][4] = {
  {0x4B, 0x17, 0xBC, 0x79},
  {0x8A, 0x2B, 0xBC, 0x79}, 
  {0x81, 0x29, 0xBC, 0x79},
  {0xE6, 0xDF, 0xBB, 0x79},
};

// Inlocking status :
int tagcount = 0;
bool access = false;

#define NR_OF_READERS   4

byte ssPins[] = {SS_1_PIN, SS_2_PIN, SS_3_PIN, SS_4_PIN};

// Create an MFRC522 instance :
MFRC522 mfrc522[NR_OF_READERS];

/**
   Initialize.
*/
String dato="";
String dataSend="";

int Puerta=2;
int estadoPuerta=3;
int alarma=4;
bool soporte=0;
int tryAgain=0; 
void setup() {

  Serial.begin(9600);           // Initialize serial communications with the PC
  while (!Serial);              // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)

  SPI.begin();                  // Init SPI bus

  /* Initializing Inputs and Outputs */
  //pinMode(GreenLed, OUTPUT);
  //digitalWrite(GreenLed, LOW);
  //pinMode(relayIN, OUTPUT);
  //digitalWrite(relayIN, HIGH);
  //pinMode(RedLed, OUTPUT);
  //digitalWrite(RedLed, LOW);

  pinMode(Puerta,OUTPUT);
  pinMode(alarma,OUTPUT);
  digitalWrite(Puerta,HIGH);
  digitalWrite(alarma,LOW);
  pinMode(estadoPuerta,INPUT);
 

  /* looking for MFRC522 readers */
  for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) {
    mfrc522[reader].PCD_Init(ssPins[reader], RST_PIN);
    
    //Serial.print(F("Reader "));
    //Serial.print(reader);
    //Serial.print(F(": "));
    
    mfrc522[reader].PCD_DumpVersionToSerial();
   
    
    //mfrc522[reader].PCD_SetAntennaGain(mfrc522[reader].RxGain_max);
  }
}

/*
   Main loop.
*/

void loop() {
  
  if (Serial.available()>0){
    dato=Serial.readString();
    dato.trim();
    Serial.println("La informaci√≥n recibida es");
    Serial.println(dato);
    //Serial.println(dato=="van");
    
  if (dato=="van"){
    
    //Serial.println("Pidiendo datos");
    dataSend="llaves_actuales ";
    
  for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) {
    
    //desbloquear
   
    
    mfrc522[reader].PCD_Reset();

    
    delay(100);
    mfrc522[reader].PCD_Init(ssPins[reader], RST_PIN);
    mfrc522[reader].PCD_AntennaOn();

    
    //Serial.print(F("Reader "));
    //Serial.print(reader);
    //Serial.print(F(": "));

    //desbloquear
    //mfrc522[reader].PCD_DumpVersionToSerial();
    
    //mfrc522[reader].PCD_SetAntennaGain(mfrc522[reader].RxGain_max);
   
   }
  
  for (uint8_t reader = 0; reader < NR_OF_READERS; reader++) {
  
   
    soporte=true;
    tryAgain=0;
    while (tryAgain<50){
      tryAgain=tryAgain+1;
     
      if (mfrc522[reader].PICC_IsNewCardPresent() ){
      if ( mfrc522[reader].PICC_ReadCardSerial()){
        dataSend= dataSend+dump_byte_array(mfrc522[reader].uid.uidByte, mfrc522[reader].uid.size)+" " ;
        soporte=false;
        break;
        mfrc522[reader].PICC_HaltA();
        mfrc522[reader].PCD_StopCrypto1();
        
       }
      }
    }
   
   if(soporte){
      dataSend=dataSend + "nokey ";
    }
  
    //if (mfrc522[reader].PICC_IsNewC..
  } //for(uint8_t reader..

  Serial.println(dataSend);
    }
    
    
    if (dato=="activarAlarma"){
      alarmOnOff(true);
    }
    if (dato=="apagarAlarma"){
      alarmOnOff(false);
    }
    if (dato=="abrirPuerta"){
      openCloseDoor(true);
    }
    if (dato=="cerrarPuerta"){
      openCloseDoor(false);
    }
    if (dato=="EstadoPuerta"){
      Serial.println(digitalRead(estadoPuerta));
      if(digitalRead(estadoPuerta)==HIGH){
        Serial.println("estadoPuerta Cerrada");
        }
        else {
          Serial.println("estadoPuerta Abierta");
          }
    }
  }
}

/**
   Helper routine to dump a byte array as hex values to Serial.
*/
String dump_byte_array(byte * buffer, byte bufferSize) {
  String lectura="";
  for (byte i = 0; i < bufferSize; i++) {

      lectura+=String(buffer[i],HEX);
   
  }
  return lectura;
}

void dump_byte_array2(byte * buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}

void alarmOnOff(bool option){
     if(option){
      Serial.println("Alarma encendida");
       digitalWrite(alarma,HIGH);
       delay(5000);
       digitalWrite(alarma,LOW);
     }
     else{
        Serial.println("Alarma Apagada");
      }
 }

void openCloseDoor(bool option){
     if(option){
      Serial.println("Puerta abierta");
      digitalWrite(Puerta,LOW);
      delay(2000);
      digitalWrite(Puerta,HIGH);
     }
     else{
        Serial.println("Puerta Cerrada");
      }
 }
